// Code generated by mockery v2.14.0. DO NOT EDIT.

package storespb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockStoresServiceClient is an autogenerated mock type for the StoresServiceClient type
type MockStoresServiceClient struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *AddProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AddProductRequest, ...grpc.CallOption) *AddProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AddProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AddProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStore provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateStoreResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateStoreRequest, ...grpc.CallOption) *CreateStoreResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateStoreResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateStoreRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecreaseProductPrice provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) DecreaseProductPrice(ctx context.Context, in *DecreaseProductPriceRequest, opts ...grpc.CallOption) (*DecreaseProductPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DecreaseProductPriceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DecreaseProductPriceRequest, ...grpc.CallOption) *DecreaseProductPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DecreaseProductPriceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DecreaseProductPriceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableParticipation provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) DisableParticipation(ctx context.Context, in *DisableParticipationRequest, opts ...grpc.CallOption) (*DisableParticipationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DisableParticipationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DisableParticipationRequest, ...grpc.CallOption) *DisableParticipationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DisableParticipationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DisableParticipationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableParticipation provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) EnableParticipation(ctx context.Context, in *EnableParticipationRequest, opts ...grpc.CallOption) (*EnableParticipationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *EnableParticipationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EnableParticipationRequest, ...grpc.CallOption) *EnableParticipationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EnableParticipationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EnableParticipationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCatalog provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) GetCatalog(ctx context.Context, in *GetCatalogRequest, opts ...grpc.CallOption) (*GetCatalogResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetCatalogResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetCatalogRequest, ...grpc.CallOption) *GetCatalogResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetCatalogResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetCatalogRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipatingStores provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) GetParticipatingStores(ctx context.Context, in *GetParticipatingStoresRequest, opts ...grpc.CallOption) (*GetParticipatingStoresResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetParticipatingStoresResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetParticipatingStoresRequest, ...grpc.CallOption) *GetParticipatingStoresResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetParticipatingStoresResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetParticipatingStoresRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetProductRequest, ...grpc.CallOption) *GetProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStore provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetStoreResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetStoreRequest, ...grpc.CallOption) *GetStoreResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetStoreResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetStoreRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStores provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) GetStores(ctx context.Context, in *GetStoresRequest, opts ...grpc.CallOption) (*GetStoresResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetStoresResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetStoresRequest, ...grpc.CallOption) *GetStoresResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetStoresResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetStoresRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseProductPrice provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) IncreaseProductPrice(ctx context.Context, in *IncreaseProductPriceRequest, opts ...grpc.CallOption) (*IncreaseProductPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *IncreaseProductPriceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *IncreaseProductPriceRequest, ...grpc.CallOption) *IncreaseProductPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IncreaseProductPriceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *IncreaseProductPriceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebrandProduct provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) RebrandProduct(ctx context.Context, in *RebrandProductRequest, opts ...grpc.CallOption) (*RebrandProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *RebrandProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RebrandProductRequest, ...grpc.CallOption) *RebrandProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RebrandProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RebrandProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebrandStore provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) RebrandStore(ctx context.Context, in *RebrandStoreRequest, opts ...grpc.CallOption) (*RebrandStoreResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *RebrandStoreResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RebrandStoreRequest, ...grpc.CallOption) *RebrandStoreResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RebrandStoreResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RebrandStoreRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProduct provides a mock function with given fields: ctx, in, opts
func (_m *MockStoresServiceClient) RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*RemoveProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *RemoveProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RemoveProductRequest, ...grpc.CallOption) *RemoveProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RemoveProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockStoresServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStoresServiceClient creates a new instance of MockStoresServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStoresServiceClient(t mockConstructorTestingTNewMockStoresServiceClient) *MockStoresServiceClient {
	mock := &MockStoresServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
