// Code generated by mockery v2.14.0. DO NOT EDIT.

package application

import (
	context "context"
	commands "github.com/LordMoMA/Intelli-Mall/stores/internal/application/commands"

	domain "github.com/LordMoMA/Intelli-Mall/stores/internal/domain"

	mock "github.com/stretchr/testify/mock"

	queries "github.com/LordMoMA/Intelli-Mall/stores/internal/application/queries"
)

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, cmd
func (_m *MockApp) AddProduct(ctx context.Context, cmd commands.AddProduct) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.AddProduct) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStore provides a mock function with given fields: ctx, cmd
func (_m *MockApp) CreateStore(ctx context.Context, cmd commands.CreateStore) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.CreateStore) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecreaseProductPrice provides a mock function with given fields: ctx, cmd
func (_m *MockApp) DecreaseProductPrice(ctx context.Context, cmd commands.DecreaseProductPrice) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.DecreaseProductPrice) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableParticipation provides a mock function with given fields: ctx, cmd
func (_m *MockApp) DisableParticipation(ctx context.Context, cmd commands.DisableParticipation) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.DisableParticipation) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableParticipation provides a mock function with given fields: ctx, cmd
func (_m *MockApp) EnableParticipation(ctx context.Context, cmd commands.EnableParticipation) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.EnableParticipation) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCatalog provides a mock function with given fields: ctx, query
func (_m *MockApp) GetCatalog(ctx context.Context, query queries.GetCatalog) ([]*domain.CatalogProduct, error) {
	ret := _m.Called(ctx, query)

	var r0 []*domain.CatalogProduct
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetCatalog) []*domain.CatalogProduct); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.CatalogProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.GetCatalog) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipatingStores provides a mock function with given fields: ctx, query
func (_m *MockApp) GetParticipatingStores(ctx context.Context, query queries.GetParticipatingStores) ([]*domain.MallStore, error) {
	ret := _m.Called(ctx, query)

	var r0 []*domain.MallStore
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetParticipatingStores) []*domain.MallStore); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.MallStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.GetParticipatingStores) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, query
func (_m *MockApp) GetProduct(ctx context.Context, query queries.GetProduct) (*domain.CatalogProduct, error) {
	ret := _m.Called(ctx, query)

	var r0 *domain.CatalogProduct
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetProduct) *domain.CatalogProduct); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CatalogProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.GetProduct) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStore provides a mock function with given fields: ctx, query
func (_m *MockApp) GetStore(ctx context.Context, query queries.GetStore) (*domain.MallStore, error) {
	ret := _m.Called(ctx, query)

	var r0 *domain.MallStore
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetStore) *domain.MallStore); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MallStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.GetStore) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStores provides a mock function with given fields: ctx, query
func (_m *MockApp) GetStores(ctx context.Context, query queries.GetStores) ([]*domain.MallStore, error) {
	ret := _m.Called(ctx, query)

	var r0 []*domain.MallStore
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetStores) []*domain.MallStore); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.MallStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.GetStores) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseProductPrice provides a mock function with given fields: ctx, cmd
func (_m *MockApp) IncreaseProductPrice(ctx context.Context, cmd commands.IncreaseProductPrice) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.IncreaseProductPrice) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RebrandProduct provides a mock function with given fields: ctx, cmd
func (_m *MockApp) RebrandProduct(ctx context.Context, cmd commands.RebrandProduct) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.RebrandProduct) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RebrandStore provides a mock function with given fields: ctx, cmd
func (_m *MockApp) RebrandStore(ctx context.Context, cmd commands.RebrandStore) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.RebrandStore) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveProduct provides a mock function with given fields: ctx, cmd
func (_m *MockApp) RemoveProduct(ctx context.Context, cmd commands.RemoveProduct) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.RemoveProduct) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockApp(t mockConstructorTestingTNewMockApp) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
