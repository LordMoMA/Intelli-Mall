// Code generated by mockery v2.14.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockStoreRepository is an autogenerated mock type for the StoreRepository type
type MockStoreRepository struct {
	mock.Mock
}

// Load provides a mock function with given fields: ctx, storeID
func (_m *MockStoreRepository) Load(ctx context.Context, storeID string) (*Store, error) {
	ret := _m.Called(ctx, storeID)

	var r0 *Store
	if rf, ok := ret.Get(0).(func(context.Context, string) *Store); ok {
		r0 = rf(ctx, storeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, storeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, store
func (_m *MockStoreRepository) Save(ctx context.Context, store *Store) error {
	ret := _m.Called(ctx, store)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Store) error); ok {
		r0 = rf(ctx, store)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockStoreRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStoreRepository creates a new instance of MockStoreRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStoreRepository(t mockConstructorTestingTNewMockStoreRepository) *MockStoreRepository {
	mock := &MockStoreRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
