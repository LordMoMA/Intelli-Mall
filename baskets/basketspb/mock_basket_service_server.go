// Code generated by mockery v2.14.0. DO NOT EDIT.

package basketspb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBasketServiceServer is an autogenerated mock type for the BasketServiceServer type
type MockBasketServiceServer struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: _a0, _a1
func (_m *MockBasketServiceServer) AddItem(_a0 context.Context, _a1 *AddItemRequest) (*AddItemResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *AddItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AddItemRequest) *AddItemResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AddItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AddItemRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelBasket provides a mock function with given fields: _a0, _a1
func (_m *MockBasketServiceServer) CancelBasket(_a0 context.Context, _a1 *CancelBasketRequest) (*CancelBasketResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CancelBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CancelBasketRequest) *CancelBasketResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CancelBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CancelBasketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutBasket provides a mock function with given fields: _a0, _a1
func (_m *MockBasketServiceServer) CheckoutBasket(_a0 context.Context, _a1 *CheckoutBasketRequest) (*CheckoutBasketResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CheckoutBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CheckoutBasketRequest) *CheckoutBasketResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CheckoutBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CheckoutBasketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasket provides a mock function with given fields: _a0, _a1
func (_m *MockBasketServiceServer) GetBasket(_a0 context.Context, _a1 *GetBasketRequest) (*GetBasketResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetBasketRequest) *GetBasketResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetBasketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItem provides a mock function with given fields: _a0, _a1
func (_m *MockBasketServiceServer) RemoveItem(_a0 context.Context, _a1 *RemoveItemRequest) (*RemoveItemResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RemoveItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RemoveItemRequest) *RemoveItemResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RemoveItemRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBasket provides a mock function with given fields: _a0, _a1
func (_m *MockBasketServiceServer) StartBasket(_a0 context.Context, _a1 *StartBasketRequest) (*StartBasketResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *StartBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *StartBasketRequest) *StartBasketResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StartBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *StartBasketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedBasketServiceServer provides a mock function with given fields:
func (_m *MockBasketServiceServer) mustEmbedUnimplementedBasketServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewMockBasketServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBasketServiceServer creates a new instance of MockBasketServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBasketServiceServer(t mockConstructorTestingTNewMockBasketServiceServer) *MockBasketServiceServer {
	mock := &MockBasketServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
