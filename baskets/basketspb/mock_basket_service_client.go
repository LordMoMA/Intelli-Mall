// Code generated by mockery v2.14.0. DO NOT EDIT.

package basketspb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockBasketServiceClient is an autogenerated mock type for the BasketServiceClient type
type MockBasketServiceClient struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, in, opts
func (_m *MockBasketServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *AddItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AddItemRequest, ...grpc.CallOption) *AddItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AddItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AddItemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelBasket provides a mock function with given fields: ctx, in, opts
func (_m *MockBasketServiceClient) CancelBasket(ctx context.Context, in *CancelBasketRequest, opts ...grpc.CallOption) (*CancelBasketResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CancelBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CancelBasketRequest, ...grpc.CallOption) *CancelBasketResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CancelBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CancelBasketRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutBasket provides a mock function with given fields: ctx, in, opts
func (_m *MockBasketServiceClient) CheckoutBasket(ctx context.Context, in *CheckoutBasketRequest, opts ...grpc.CallOption) (*CheckoutBasketResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CheckoutBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CheckoutBasketRequest, ...grpc.CallOption) *CheckoutBasketResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CheckoutBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CheckoutBasketRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasket provides a mock function with given fields: ctx, in, opts
func (_m *MockBasketServiceClient) GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*GetBasketResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetBasketRequest, ...grpc.CallOption) *GetBasketResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetBasketRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItem provides a mock function with given fields: ctx, in, opts
func (_m *MockBasketServiceClient) RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *RemoveItemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RemoveItemRequest, ...grpc.CallOption) *RemoveItemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveItemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RemoveItemRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBasket provides a mock function with given fields: ctx, in, opts
func (_m *MockBasketServiceClient) StartBasket(ctx context.Context, in *StartBasketRequest, opts ...grpc.CallOption) (*StartBasketResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *StartBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *StartBasketRequest, ...grpc.CallOption) *StartBasketResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StartBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *StartBasketRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockBasketServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBasketServiceClient creates a new instance of MockBasketServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBasketServiceClient(t mockConstructorTestingTNewMockBasketServiceClient) *MockBasketServiceClient {
	mock := &MockBasketServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
