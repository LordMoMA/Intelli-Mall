// Code generated by mockery v2.14.0. DO NOT EDIT.

package application

import (
	context "context"
	domain "github.com/LordMoMA/Intelli-Mall/customers/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

// AuthorizeCustomer provides a mock function with given fields: ctx, authorize
func (_m *MockApp) AuthorizeCustomer(ctx context.Context, authorize AuthorizeCustomer) error {
	ret := _m.Called(ctx, authorize)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AuthorizeCustomer) error); ok {
		r0 = rf(ctx, authorize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableCustomer provides a mock function with given fields: ctx, disable
func (_m *MockApp) DisableCustomer(ctx context.Context, disable DisableCustomer) error {
	ret := _m.Called(ctx, disable)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DisableCustomer) error); ok {
		r0 = rf(ctx, disable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableCustomer provides a mock function with given fields: ctx, enable
func (_m *MockApp) EnableCustomer(ctx context.Context, enable EnableCustomer) error {
	ret := _m.Called(ctx, enable)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, EnableCustomer) error); ok {
		r0 = rf(ctx, enable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomer provides a mock function with given fields: ctx, get
func (_m *MockApp) GetCustomer(ctx context.Context, get GetCustomer) (*domain.Customer, error) {
	ret := _m.Called(ctx, get)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(context.Context, GetCustomer) *domain.Customer); ok {
		r0 = rf(ctx, get)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, GetCustomer) error); ok {
		r1 = rf(ctx, get)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCustomer provides a mock function with given fields: ctx, register
func (_m *MockApp) RegisterCustomer(ctx context.Context, register RegisterCustomer) error {
	ret := _m.Called(ctx, register)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, RegisterCustomer) error); ok {
		r0 = rf(ctx, register)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockApp(t mockConstructorTestingTNewMockApp) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
