// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: customerspb/api.proto

package customerspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomersServiceClient is the client API for CustomersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersServiceClient interface {
	RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error)
	EnableCustomer(ctx context.Context, in *EnableCustomerRequest, opts ...grpc.CallOption) (*EnableCustomerResponse, error)
	DisableCustomer(ctx context.Context, in *DisableCustomerRequest, opts ...grpc.CallOption) (*DisableCustomerResponse, error)
	ChangeSmsNumber(ctx context.Context, in *ChangeSmsNumberRequest, opts ...grpc.CallOption) (*ChangeSmsNumberResponse, error)
	AuthorizeCustomer(ctx context.Context, in *AuthorizeCustomerRequest, opts ...grpc.CallOption) (*AuthorizeCustomerResponse, error)
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error)
}

type customersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersServiceClient(cc grpc.ClientConnInterface) CustomersServiceClient {
	return &customersServiceClient{cc}
}

func (c *customersServiceClient) RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error) {
	out := new(RegisterCustomerResponse)
	err := c.cc.Invoke(ctx, "/customerspb.CustomersService/RegisterCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) EnableCustomer(ctx context.Context, in *EnableCustomerRequest, opts ...grpc.CallOption) (*EnableCustomerResponse, error) {
	out := new(EnableCustomerResponse)
	err := c.cc.Invoke(ctx, "/customerspb.CustomersService/EnableCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) DisableCustomer(ctx context.Context, in *DisableCustomerRequest, opts ...grpc.CallOption) (*DisableCustomerResponse, error) {
	out := new(DisableCustomerResponse)
	err := c.cc.Invoke(ctx, "/customerspb.CustomersService/DisableCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) ChangeSmsNumber(ctx context.Context, in *ChangeSmsNumberRequest, opts ...grpc.CallOption) (*ChangeSmsNumberResponse, error) {
	out := new(ChangeSmsNumberResponse)
	err := c.cc.Invoke(ctx, "/customerspb.CustomersService/ChangeSmsNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) AuthorizeCustomer(ctx context.Context, in *AuthorizeCustomerRequest, opts ...grpc.CallOption) (*AuthorizeCustomerResponse, error) {
	out := new(AuthorizeCustomerResponse)
	err := c.cc.Invoke(ctx, "/customerspb.CustomersService/AuthorizeCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersServiceClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error) {
	out := new(GetCustomerResponse)
	err := c.cc.Invoke(ctx, "/customerspb.CustomersService/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomersServiceServer is the server API for CustomersService service.
// All implementations must embed UnimplementedCustomersServiceServer
// for forward compatibility
type CustomersServiceServer interface {
	RegisterCustomer(context.Context, *RegisterCustomerRequest) (*RegisterCustomerResponse, error)
	EnableCustomer(context.Context, *EnableCustomerRequest) (*EnableCustomerResponse, error)
	DisableCustomer(context.Context, *DisableCustomerRequest) (*DisableCustomerResponse, error)
	ChangeSmsNumber(context.Context, *ChangeSmsNumberRequest) (*ChangeSmsNumberResponse, error)
	AuthorizeCustomer(context.Context, *AuthorizeCustomerRequest) (*AuthorizeCustomerResponse, error)
	GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerResponse, error)
	mustEmbedUnimplementedCustomersServiceServer()
}

// UnimplementedCustomersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersServiceServer struct {
}

func (UnimplementedCustomersServiceServer) RegisterCustomer(context.Context, *RegisterCustomerRequest) (*RegisterCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCustomer not implemented")
}
func (UnimplementedCustomersServiceServer) EnableCustomer(context.Context, *EnableCustomerRequest) (*EnableCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCustomer not implemented")
}
func (UnimplementedCustomersServiceServer) DisableCustomer(context.Context, *DisableCustomerRequest) (*DisableCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCustomer not implemented")
}
func (UnimplementedCustomersServiceServer) ChangeSmsNumber(context.Context, *ChangeSmsNumberRequest) (*ChangeSmsNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSmsNumber not implemented")
}
func (UnimplementedCustomersServiceServer) AuthorizeCustomer(context.Context, *AuthorizeCustomerRequest) (*AuthorizeCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeCustomer not implemented")
}
func (UnimplementedCustomersServiceServer) GetCustomer(context.Context, *GetCustomerRequest) (*GetCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCustomersServiceServer) mustEmbedUnimplementedCustomersServiceServer() {}

// UnsafeCustomersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersServiceServer will
// result in compilation errors.
type UnsafeCustomersServiceServer interface {
	mustEmbedUnimplementedCustomersServiceServer()
}

func RegisterCustomersServiceServer(s grpc.ServiceRegistrar, srv CustomersServiceServer) {
	s.RegisterService(&CustomersService_ServiceDesc, srv)
}

func _CustomersService_RegisterCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).RegisterCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerspb.CustomersService/RegisterCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).RegisterCustomer(ctx, req.(*RegisterCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_EnableCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).EnableCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerspb.CustomersService/EnableCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).EnableCustomer(ctx, req.(*EnableCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_DisableCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).DisableCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerspb.CustomersService/DisableCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).DisableCustomer(ctx, req.(*DisableCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_ChangeSmsNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSmsNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).ChangeSmsNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerspb.CustomersService/ChangeSmsNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).ChangeSmsNumber(ctx, req.(*ChangeSmsNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_AuthorizeCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).AuthorizeCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerspb.CustomersService/AuthorizeCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).AuthorizeCustomer(ctx, req.(*AuthorizeCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerspb.CustomersService/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServiceServer).GetCustomer(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomersService_ServiceDesc is the grpc.ServiceDesc for CustomersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customerspb.CustomersService",
	HandlerType: (*CustomersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCustomer",
			Handler:    _CustomersService_RegisterCustomer_Handler,
		},
		{
			MethodName: "EnableCustomer",
			Handler:    _CustomersService_EnableCustomer_Handler,
		},
		{
			MethodName: "DisableCustomer",
			Handler:    _CustomersService_DisableCustomer_Handler,
		},
		{
			MethodName: "ChangeSmsNumber",
			Handler:    _CustomersService_ChangeSmsNumber_Handler,
		},
		{
			MethodName: "AuthorizeCustomer",
			Handler:    _CustomersService_AuthorizeCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _CustomersService_GetCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customerspb/api.proto",
}
