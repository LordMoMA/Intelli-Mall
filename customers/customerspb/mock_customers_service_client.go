// Code generated by mockery v2.14.0. DO NOT EDIT.

package customerspb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockCustomersServiceClient is an autogenerated mock type for the CustomersServiceClient type
type MockCustomersServiceClient struct {
	mock.Mock
}

// AuthorizeCustomer provides a mock function with given fields: ctx, in, opts
func (_m *MockCustomersServiceClient) AuthorizeCustomer(ctx context.Context, in *AuthorizeCustomerRequest, opts ...grpc.CallOption) (*AuthorizeCustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *AuthorizeCustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AuthorizeCustomerRequest, ...grpc.CallOption) *AuthorizeCustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AuthorizeCustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AuthorizeCustomerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeSmsNumber provides a mock function with given fields: ctx, in, opts
func (_m *MockCustomersServiceClient) ChangeSmsNumber(ctx context.Context, in *ChangeSmsNumberRequest, opts ...grpc.CallOption) (*ChangeSmsNumberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ChangeSmsNumberResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ChangeSmsNumberRequest, ...grpc.CallOption) *ChangeSmsNumberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChangeSmsNumberResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ChangeSmsNumberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableCustomer provides a mock function with given fields: ctx, in, opts
func (_m *MockCustomersServiceClient) DisableCustomer(ctx context.Context, in *DisableCustomerRequest, opts ...grpc.CallOption) (*DisableCustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DisableCustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DisableCustomerRequest, ...grpc.CallOption) *DisableCustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DisableCustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DisableCustomerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableCustomer provides a mock function with given fields: ctx, in, opts
func (_m *MockCustomersServiceClient) EnableCustomer(ctx context.Context, in *EnableCustomerRequest, opts ...grpc.CallOption) (*EnableCustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *EnableCustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EnableCustomerRequest, ...grpc.CallOption) *EnableCustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EnableCustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EnableCustomerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomer provides a mock function with given fields: ctx, in, opts
func (_m *MockCustomersServiceClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetCustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetCustomerRequest, ...grpc.CallOption) *GetCustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetCustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetCustomerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCustomer provides a mock function with given fields: ctx, in, opts
func (_m *MockCustomersServiceClient) RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *RegisterCustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterCustomerRequest, ...grpc.CallOption) *RegisterCustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterCustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RegisterCustomerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockCustomersServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCustomersServiceClient creates a new instance of MockCustomersServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCustomersServiceClient(t mockConstructorTestingTNewMockCustomersServiceClient) *MockCustomersServiceClient {
	mock := &MockCustomersServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
