// Code generated by mockery v2.14.0. DO NOT EDIT.

package depotpb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDepotServiceServer is an autogenerated mock type for the DepotServiceServer type
type MockDepotServiceServer struct {
	mock.Mock
}

// AssignShoppingList provides a mock function with given fields: _a0, _a1
func (_m *MockDepotServiceServer) AssignShoppingList(_a0 context.Context, _a1 *AssignShoppingListRequest) (*AssignShoppingListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *AssignShoppingListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AssignShoppingListRequest) *AssignShoppingListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AssignShoppingListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AssignShoppingListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelShoppingList provides a mock function with given fields: _a0, _a1
func (_m *MockDepotServiceServer) CancelShoppingList(_a0 context.Context, _a1 *CancelShoppingListRequest) (*CancelShoppingListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CancelShoppingListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CancelShoppingListRequest) *CancelShoppingListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CancelShoppingListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CancelShoppingListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteShoppingList provides a mock function with given fields: _a0, _a1
func (_m *MockDepotServiceServer) CompleteShoppingList(_a0 context.Context, _a1 *CompleteShoppingListRequest) (*CompleteShoppingListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CompleteShoppingListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CompleteShoppingListRequest) *CompleteShoppingListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CompleteShoppingListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CompleteShoppingListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateShoppingList provides a mock function with given fields: _a0, _a1
func (_m *MockDepotServiceServer) CreateShoppingList(_a0 context.Context, _a1 *CreateShoppingListRequest) (*CreateShoppingListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateShoppingListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateShoppingListRequest) *CreateShoppingListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateShoppingListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateShoppingListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedDepotServiceServer provides a mock function with given fields:
func (_m *MockDepotServiceServer) mustEmbedUnimplementedDepotServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewMockDepotServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDepotServiceServer creates a new instance of MockDepotServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDepotServiceServer(t mockConstructorTestingTNewMockDepotServiceServer) *MockDepotServiceServer {
	mock := &MockDepotServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
