// Code generated by mockery v2.14.0. DO NOT EDIT.

package depotpb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockDepotServiceClient is an autogenerated mock type for the DepotServiceClient type
type MockDepotServiceClient struct {
	mock.Mock
}

// AssignShoppingList provides a mock function with given fields: ctx, in, opts
func (_m *MockDepotServiceClient) AssignShoppingList(ctx context.Context, in *AssignShoppingListRequest, opts ...grpc.CallOption) (*AssignShoppingListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *AssignShoppingListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AssignShoppingListRequest, ...grpc.CallOption) *AssignShoppingListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AssignShoppingListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AssignShoppingListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelShoppingList provides a mock function with given fields: ctx, in, opts
func (_m *MockDepotServiceClient) CancelShoppingList(ctx context.Context, in *CancelShoppingListRequest, opts ...grpc.CallOption) (*CancelShoppingListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CancelShoppingListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CancelShoppingListRequest, ...grpc.CallOption) *CancelShoppingListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CancelShoppingListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CancelShoppingListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteShoppingList provides a mock function with given fields: ctx, in, opts
func (_m *MockDepotServiceClient) CompleteShoppingList(ctx context.Context, in *CompleteShoppingListRequest, opts ...grpc.CallOption) (*CompleteShoppingListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CompleteShoppingListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CompleteShoppingListRequest, ...grpc.CallOption) *CompleteShoppingListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CompleteShoppingListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CompleteShoppingListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateShoppingList provides a mock function with given fields: ctx, in, opts
func (_m *MockDepotServiceClient) CreateShoppingList(ctx context.Context, in *CreateShoppingListRequest, opts ...grpc.CallOption) (*CreateShoppingListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateShoppingListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateShoppingListRequest, ...grpc.CallOption) *CreateShoppingListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateShoppingListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateShoppingListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockDepotServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDepotServiceClient creates a new instance of MockDepotServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDepotServiceClient(t mockConstructorTestingTNewMockDepotServiceClient) *MockDepotServiceClient {
	mock := &MockDepotServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
