// Code generated by mockery v2.14.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProductCacheRepository is an autogenerated mock type for the ProductCacheRepository type
type MockProductCacheRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, productID, storeID, name
func (_m *MockProductCacheRepository) Add(ctx context.Context, productID string, storeID string, name string) error {
	ret := _m.Called(ctx, productID, storeID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, productID, storeID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, productID
func (_m *MockProductCacheRepository) Find(ctx context.Context, productID string) (*Product, error) {
	ret := _m.Called(ctx, productID)

	var r0 *Product
	if rf, ok := ret.Get(0).(func(context.Context, string) *Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rebrand provides a mock function with given fields: ctx, productID, name
func (_m *MockProductCacheRepository) Rebrand(ctx context.Context, productID string, name string) error {
	ret := _m.Called(ctx, productID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, productID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: ctx, productID
func (_m *MockProductCacheRepository) Remove(ctx context.Context, productID string) error {
	ret := _m.Called(ctx, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockProductCacheRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockProductCacheRepository creates a new instance of MockProductCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockProductCacheRepository(t mockConstructorTestingTNewMockProductCacheRepository) *MockProductCacheRepository {
	mock := &MockProductCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
