// Code generated by mockery v2.14.0. DO NOT EDIT.

package paymentspb

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockPaymentsServiceClient is an autogenerated mock type for the PaymentsServiceClient type
type MockPaymentsServiceClient struct {
	mock.Mock
}

// AdjustInvoice provides a mock function with given fields: ctx, in, opts
func (_m *MockPaymentsServiceClient) AdjustInvoice(ctx context.Context, in *AdjustInvoiceRequest, opts ...grpc.CallOption) (*AdjustInvoiceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *AdjustInvoiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AdjustInvoiceRequest, ...grpc.CallOption) *AdjustInvoiceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AdjustInvoiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AdjustInvoiceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizePayment provides a mock function with given fields: ctx, in, opts
func (_m *MockPaymentsServiceClient) AuthorizePayment(ctx context.Context, in *AuthorizePaymentRequest, opts ...grpc.CallOption) (*AuthorizePaymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *AuthorizePaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AuthorizePaymentRequest, ...grpc.CallOption) *AuthorizePaymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AuthorizePaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AuthorizePaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelInvoice provides a mock function with given fields: ctx, in, opts
func (_m *MockPaymentsServiceClient) CancelInvoice(ctx context.Context, in *CancelInvoiceRequest, opts ...grpc.CallOption) (*CancelInvoiceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CancelInvoiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CancelInvoiceRequest, ...grpc.CallOption) *CancelInvoiceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CancelInvoiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CancelInvoiceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmPayment provides a mock function with given fields: ctx, in, opts
func (_m *MockPaymentsServiceClient) ConfirmPayment(ctx context.Context, in *ConfirmPaymentRequest, opts ...grpc.CallOption) (*ConfirmPaymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ConfirmPaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ConfirmPaymentRequest, ...grpc.CallOption) *ConfirmPaymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfirmPaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ConfirmPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvoice provides a mock function with given fields: ctx, in, opts
func (_m *MockPaymentsServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateInvoiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateInvoiceRequest, ...grpc.CallOption) *CreateInvoiceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateInvoiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateInvoiceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayInvoice provides a mock function with given fields: ctx, in, opts
func (_m *MockPaymentsServiceClient) PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*PayInvoiceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *PayInvoiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PayInvoiceRequest, ...grpc.CallOption) *PayInvoiceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PayInvoiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PayInvoiceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPaymentsServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPaymentsServiceClient creates a new instance of MockPaymentsServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPaymentsServiceClient(t mockConstructorTestingTNewMockPaymentsServiceClient) *MockPaymentsServiceClient {
	mock := &MockPaymentsServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
