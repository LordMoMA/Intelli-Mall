// Code generated by mockery v2.14.0. DO NOT EDIT.

package paymentspb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPaymentsServiceServer is an autogenerated mock type for the PaymentsServiceServer type
type MockPaymentsServiceServer struct {
	mock.Mock
}

// AdjustInvoice provides a mock function with given fields: _a0, _a1
func (_m *MockPaymentsServiceServer) AdjustInvoice(_a0 context.Context, _a1 *AdjustInvoiceRequest) (*AdjustInvoiceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *AdjustInvoiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AdjustInvoiceRequest) *AdjustInvoiceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AdjustInvoiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AdjustInvoiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizePayment provides a mock function with given fields: _a0, _a1
func (_m *MockPaymentsServiceServer) AuthorizePayment(_a0 context.Context, _a1 *AuthorizePaymentRequest) (*AuthorizePaymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *AuthorizePaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *AuthorizePaymentRequest) *AuthorizePaymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AuthorizePaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *AuthorizePaymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelInvoice provides a mock function with given fields: _a0, _a1
func (_m *MockPaymentsServiceServer) CancelInvoice(_a0 context.Context, _a1 *CancelInvoiceRequest) (*CancelInvoiceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CancelInvoiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CancelInvoiceRequest) *CancelInvoiceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CancelInvoiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CancelInvoiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmPayment provides a mock function with given fields: _a0, _a1
func (_m *MockPaymentsServiceServer) ConfirmPayment(_a0 context.Context, _a1 *ConfirmPaymentRequest) (*ConfirmPaymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ConfirmPaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ConfirmPaymentRequest) *ConfirmPaymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfirmPaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ConfirmPaymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvoice provides a mock function with given fields: _a0, _a1
func (_m *MockPaymentsServiceServer) CreateInvoice(_a0 context.Context, _a1 *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateInvoiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateInvoiceRequest) *CreateInvoiceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateInvoiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateInvoiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayInvoice provides a mock function with given fields: _a0, _a1
func (_m *MockPaymentsServiceServer) PayInvoice(_a0 context.Context, _a1 *PayInvoiceRequest) (*PayInvoiceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *PayInvoiceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PayInvoiceRequest) *PayInvoiceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PayInvoiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PayInvoiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedPaymentsServiceServer provides a mock function with given fields:
func (_m *MockPaymentsServiceServer) mustEmbedUnimplementedPaymentsServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewMockPaymentsServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPaymentsServiceServer creates a new instance of MockPaymentsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPaymentsServiceServer(t mockConstructorTestingTNewMockPaymentsServiceServer) *MockPaymentsServiceServer {
	mock := &MockPaymentsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
