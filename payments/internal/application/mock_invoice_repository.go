// Code generated by mockery v2.14.0. DO NOT EDIT.

package application

import (
	context "context"
	models "github.com/LordMoMA/Intelli-Mall/payments/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockInvoiceRepository is an autogenerated mock type for the InvoiceRepository type
type MockInvoiceRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, invoiceID
func (_m *MockInvoiceRepository) Find(ctx context.Context, invoiceID string) (*models.Invoice, error) {
	ret := _m.Called(ctx, invoiceID)

	var r0 *models.Invoice
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Invoice); ok {
		r0 = rf(ctx, invoiceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, invoiceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, invoice
func (_m *MockInvoiceRepository) Save(ctx context.Context, invoice *models.Invoice) error {
	ret := _m.Called(ctx, invoice)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Invoice) error); ok {
		r0 = rf(ctx, invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, invoice
func (_m *MockInvoiceRepository) Update(ctx context.Context, invoice *models.Invoice) error {
	ret := _m.Called(ctx, invoice)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Invoice) error); ok {
		r0 = rf(ctx, invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockInvoiceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInvoiceRepository creates a new instance of MockInvoiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInvoiceRepository(t mockConstructorTestingTNewMockInvoiceRepository) *MockInvoiceRepository {
	mock := &MockInvoiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
