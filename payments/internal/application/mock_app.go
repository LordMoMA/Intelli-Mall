// Code generated by mockery v2.14.0. DO NOT EDIT.

package application

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

// AdjustInvoice provides a mock function with given fields: ctx, adjust
func (_m *MockApp) AdjustInvoice(ctx context.Context, adjust AdjustInvoice) error {
	ret := _m.Called(ctx, adjust)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AdjustInvoice) error); ok {
		r0 = rf(ctx, adjust)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizePayment provides a mock function with given fields: ctx, authorize
func (_m *MockApp) AuthorizePayment(ctx context.Context, authorize AuthorizePayment) error {
	ret := _m.Called(ctx, authorize)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AuthorizePayment) error); ok {
		r0 = rf(ctx, authorize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelInvoice provides a mock function with given fields: ctx, cancel
func (_m *MockApp) CancelInvoice(ctx context.Context, cancel CancelInvoice) error {
	ret := _m.Called(ctx, cancel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CancelInvoice) error); ok {
		r0 = rf(ctx, cancel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmPayment provides a mock function with given fields: ctx, confirm
func (_m *MockApp) ConfirmPayment(ctx context.Context, confirm ConfirmPayment) error {
	ret := _m.Called(ctx, confirm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ConfirmPayment) error); ok {
		r0 = rf(ctx, confirm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInvoice provides a mock function with given fields: ctx, create
func (_m *MockApp) CreateInvoice(ctx context.Context, create CreateInvoice) error {
	ret := _m.Called(ctx, create)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateInvoice) error); ok {
		r0 = rf(ctx, create)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayInvoice provides a mock function with given fields: ctx, pay
func (_m *MockApp) PayInvoice(ctx context.Context, pay PayInvoice) error {
	ret := _m.Called(ctx, pay)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, PayInvoice) error); ok {
		r0 = rf(ctx, pay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockApp(t mockConstructorTestingTNewMockApp) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
