// Code generated by mockery v2.14.0. DO NOT EDIT.

package es

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAggregateStore is an autogenerated mock type for the AggregateStore type
type MockAggregateStore struct {
	mock.Mock
}

// Load provides a mock function with given fields: ctx, aggregate
func (_m *MockAggregateStore) Load(ctx context.Context, aggregate EventSourcedAggregate) error {
	ret := _m.Called(ctx, aggregate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, EventSourcedAggregate) error); ok {
		r0 = rf(ctx, aggregate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, aggregate
func (_m *MockAggregateStore) Save(ctx context.Context, aggregate EventSourcedAggregate) error {
	ret := _m.Called(ctx, aggregate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, EventSourcedAggregate) error); ok {
		r0 = rf(ctx, aggregate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockAggregateStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAggregateStore creates a new instance of MockAggregateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAggregateStore(t mockConstructorTestingTNewMockAggregateStore) *MockAggregateStore {
	mock := &MockAggregateStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
