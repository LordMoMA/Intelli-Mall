// Code generated by mockery v2.14.0. DO NOT EDIT.

package es

import (
	ddd "github.com/LordMoMA/Intelli-Mall/internal/ddd"

	mock "github.com/stretchr/testify/mock"
)

// MockEventSourcedAggregate is an autogenerated mock type for the EventSourcedAggregate type
type MockEventSourcedAggregate struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockEventSourcedAggregate) AddEvent(_a0 string, _a1 ddd.EventPayload, _a2 ...ddd.EventOption) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// AggregateName provides a mock function with given fields:
func (_m *MockEventSourcedAggregate) AggregateName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ApplyEvent provides a mock function with given fields: _a0
func (_m *MockEventSourcedAggregate) ApplyEvent(_a0 ddd.Event) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(ddd.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearEvents provides a mock function with given fields:
func (_m *MockEventSourcedAggregate) ClearEvents() {
	_m.Called()
}

// CommitEvents provides a mock function with given fields:
func (_m *MockEventSourcedAggregate) CommitEvents() {
	_m.Called()
}

// Events provides a mock function with given fields:
func (_m *MockEventSourcedAggregate) Events() []ddd.AggregateEvent {
	ret := _m.Called()

	var r0 []ddd.AggregateEvent
	if rf, ok := ret.Get(0).(func() []ddd.AggregateEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ddd.AggregateEvent)
		}
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *MockEventSourcedAggregate) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PendingVersion provides a mock function with given fields:
func (_m *MockEventSourcedAggregate) PendingVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *MockEventSourcedAggregate) Version() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewMockEventSourcedAggregate interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventSourcedAggregate creates a new instance of MockEventSourcedAggregate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventSourcedAggregate(t mockConstructorTestingTNewMockEventSourcedAggregate) *MockEventSourcedAggregate {
	mock := &MockEventSourcedAggregate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
